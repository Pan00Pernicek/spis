#!/bin/bash
printf '\e[?1049h'
# Ebashs: text editor written in pure bash powered by murky logic and mess
shopt -s lastpipe # For syntax
shopt -s extglob # Ensure advanced pattern matching is available
shopt -s checkwinsize; (:;:) # Enable and then trigger a terminal size refresh
trap redraw WINCH ALRM # Attach WINCH and ALRM to redraw the screen
trap die EXIT HUP USR1 # Attach most exit codes to cleanup and exit
trap quit INT
trap quit SIGTERM

declare -A syntax style options charmap commands
declare -A menulineedit menulineabout diredmenu menulinedebug
declare -A menufile menuhelp menukey menudebug menufancy
declare -A keys_def keys_edit keys_prefix keys_dired keys_view keys_menu keys_debuginput keys_prefix_help
declare -A key_options_menu key_options_debuginput
declare -a input_hex overlay
declare -n buffer buffersyntax bufferexpand bufferdata
declare -i menulinep menulinepy buffer_lenght toplines bottomlines hidden offx offy sizx sizy update ismenu comment current_count
declare -n menucon menuline
declare message reset readin


### Config options
## General options
options=(
	[mouse]=0
	[todonote]=1
	[menuline]=1
	[tabchar]='│   '
	[refresh_timeout]=1
	[file_prompt]='Path: '
	[command_prompt]='M-x '
	[cancelhex]='18 0'
	[default_mode]='edit'
	[help_message]='(F10 to open menu)'
	[dired_message]='Pick a file'
)
## Key bindings configuration
#      A keybindings for a mode x have to be in associative array named keys_${x}, else spis won't see them
#      keys_def is special case containing the common definitions.
#      It isn't used by itself anywhere, it exists purely for simplification.
#
#      A options for the keybings of given mode are defined by ass. array named key_options_${x}
#          [else] option defines what should happen if the input wasn't any of keys defined in keybings
keys_def=(
	[previous_line]='1b 5b 41 0'
	[next_line]='1b 5b 42 0'
	[forward_char]='1b 5b 43 0'
	[backward_char]='1b 5b 44 0'
	[scroll_down]='1b 5b 35 7e 0'
	[scroll_up]='1b 5b 36 7e 0'
	[select]='0'
)
keys_edit=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[forward_char]}]='forward-char'
	[${keys_def[backward_char]}]='backward-char'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	#[1b 5b 31 3b 32 41 0]='select_up'
	#[1b 5b 31 3b 32 42 0]='select_down'
	#[1b 5b 31 3b 32 43 0]='select_right'
	#[1b 5b 31 3b 32 44 0]='select_left'
	# TODO: selection
	[18 0]='prefix'
	[8 0]='prefix-help'
	[1b 5b 32 31 7e 0]='menulinemenu'
	[10 0]='previous-line'
	[e 0]='next-line'
	[6 0]='forward-char'
	[1b 66 0]='forward-word'
	[2 0]='backward-char'
	[1b 62 0]='backward-word'
	[10 0]='scroll-down'
	[16 0]='scroll-up'
	[0]='newline'
	[c 0]='newline'
	[14 0]='execute'
	[4 0]='delete-line'
	[13 0]='shell'
	[7f 0]='backspace'
	[1b 71 0]='die'
	[1b 67 0]='menukey'
	[1b 78 0]='execute-extended-command'
	[1 0]='move-beginning-of-line'
	[1b 5b 48 0]='move-beginning-of-line'
	[5 0]='move-end-of-line'
	[1b 5b 46 0]='move-end-of-line'
)
keys_dired=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[forward_char]}]='forward-char'
	[${keys_def[backward_char]}]='backward-char'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	[${keys_def[select]}]='dired-select'
	[68 0]='toggle_hidden'
)
keys_view=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[forward_char]}]='forward-char'
	[${keys_def[backward_char]}]='backward-char'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	[${keys_def[select]}]='quit-view'
)
keys_prefix=(
	[18 0]='quit'
	[7 0]='quit-prefix'
	[13 0]='write_buffer'
	[6 0]='find-file'
	[62 0]='switch-to-buffer'
)
keys_prefix_help=(
	[7 0]='quit-prefix'
	[1 0]='about'
)
keys_menu=(
	[${keys_def[previous_line]}]='menuup'
	[${keys_def[next_line]}]='menudown'
	[${keys_def[select]}]='menuselect'
)
key_options_menu=(
	[else]='menuleave'
)
## Style
#      Defined in escape codes.
style=(
	[none]='\e[m'
	[TODO]='\e[0;97;45m'
	[NOTE]='\e[0;97;100m'
	[menuline]='\e[0;37;40m'
	[menuitem]='\e[0;37;40m'
	[selected]='\e[30;45m'
	[link]='\e[94m'
	[menuitemselected]='\e[30;45m'
	[infoline]='\e[40;97m'
	[number]='\e[0;90m'
	[numberempty]='\e[0;90m'
	[numberselected]='\e[0;91m'
	[tab]='\e[0;90m'
	#syntax
	[quotevar]='\e[0;36;48m'
	[comment]='\e[3;37;48m'
	[variable]='\e[0;96m'
	[option]='\e[0;93m'
	[flow]='\e[0;93m'
	[pipe]='\e[1;94m'
	[bracket]='\e[1;95m'
	[quote]='\e[0;92m'
	[dquote]='\e[0;32m'
	[set]='\e[0;94;108m'
	[fn]='\e[0;30;44m'
	[keyword]='\e[0;91m'
	[init]='\e[0;31m'
)
function menulinemenu {
	declare -ng menucon=menufancy
	#menulinepy=$(( sizy - ${#menufancy[@]} ))
	menu
}
menulineedit=(
	[File]=menufile	[Help]=menuhelp
	[Keys]=menukey	    [Redraw]=refresh
	[Debug]=menudebug
)
function menufile { declare -ng menucon=menufile; menu; }
menufile=(
	[Quit       C-x C-c ]="quit"
	[Visit file C-x C-f ]="find-file"
	[Execute        C-t ]="execute"
	[Save       C-x C-s ]="write-buffer"
	[File picker        ]="dired"
)

function menuhelp { declare -ng menucon=menuhelp; menu; }
menuhelp=(
	[Keybinding          ]=menukey
	[About               ]=about
)

function menukey { declare -ng menucon=menukey; menu; }
menukey=(
	[Exit       C-x C-c ]="quit"
	[New Line   C-l | ⏎ ]="newline"
	[Set target     M-r ]="find-file"
	[Visit file C-x C-f ]="read-buffer"
	[Save file  C-x C-s ]="write-buffer"
	[Delete Line    C-d ]="delete-line"
	[Prev Line      C-p ]="previous-line"
	[Next Line      C-n ]="next-line"
	[Prev Page      C-y ]="scroll-down"
	[Next Page      C-v ]="scroll-up"
	[Execute        C-t ]="execute"
	[Shell          C-s ]="shell"
	[Force exist    M-q ]="die"
)

function menudebug { declare -ng menucon=menudebug; menu; }
menudebug=(
	[clear      ]=clear-screen
	[refresh    ]=refresh
	[backspace  ]=backspace
	[right      ]=forward-char
	[left       ]=backward-char
	[inputcodes ]=inputcodes
)

syntax=(
	[bash]=syntax-bash	[sh]=syntax-bash
	[ksh]=syntax-bash	[mksh]=syntax-bash
	[dash]=syntax-bash	[zsh]=syntax-bash
	[conf]=syntax-config	[unknown]=syntax-unknown
)

commands=(
	[quit]='quit'
	[newline]='newline'
	[set-buffer-file]='find-file'
	[read-file]='read-buffer'
	[write-file]='write-buffer'
	[delete-line]='delete-line'
	[toggle-mouse]='toggle-mouse'
	[execute]='execute'
	[shell]='shell'
	[force-quit]='die'
	[about]='about'
	[backspace]='backspace'
	[menu]='menu'
	[menul]='menulinemenu'
	[input]='inputcodes'
	[scroll-up]='scroll-up'
	[scroll-down]='scroll-down'
	[dired]='dired'
	[switch-to-buffer]='switch-to-buffer'
)
diredmenu=(
	[toggle hidden \(h\)]="toggle_hidden"
)
## source extensions here
# source extensions/evil
## rest of this garbageware

version="Ebashs dev"menulinepy=0; menulinep=0 # menu positions
offx=0 # TODO: abuse offsets and size of main render
offy=1
sizx=$COLUMNS
sizy=$((LINES - 1))
update=1
case "${options[menuline]}" in
	1) toplines=1;;
	0) toplines=0;;
esac
bottomlines=2
reset='\e[0;0m'
function update-menuline-menu {
	declare -Ag menufancy
	for item in "${!menulineedit[@]}"; do
		menufancy+=(["$(printf '%-12s' "$item")"]="${menulineedit["$item"]}")
	done
	menufancy+=([Quit        ]=quit)
}
update-menuline-menu
## charmap
#TODO: this will be usesfull for later implementation of ligatures and stuff
charmap=(
	#[0] is reserved for any unmapped char
	[	]='t' # tab
	[ ]='s' # space
	#[	-render]="${options[tabchar]}"
)


function clear-screen {
	printf "\033c" # clear
}

# getting the cursor position -- unused for now
#function getcy {
#	local pos
#	IFS='[;' read -p $'\e[6n' -d R -a pos -rs || echo "failed with error: $? ; ${pos[*]}"
#	echo "${pos[1]}"
#}
#function getcx {
#	local pos
#	IFS='[;' read -p $'\e[6n' -d R -a pos -rs || echo "failed with error: $? ; ${pos[*]}"
#	echo "${pos[2]}"
#}

function refresh {
	clear-screen
	message="reloaded..."
	make-render
	redraw
	message=
}
function switch-mode {
	bckmode="${bufferdata[mode]}"
	bufferdata[mode]="$1"
	redraw-statusline
}
function prefix {
	switch-mode prefix
}
function prefix-help {
	switch-mode prefix_help
}
function quit-prefix {
	bufferdata[mode]="$bckmode"
	unset bckmode
	redraw-statusline
}
function read-command {
	printf '\e[%s;0H' $((sizy + offy))
	printf '\e[?25h'
	read -re -p "$1" "$2" || return 1
}
function execute-extended-command {
	read-command "${options[command_prompt]}" readin || return 1
	for lcmd in "${!commands[@]}"; {
		[ "$readin" = "$lcmd" ] && "${commands[$lcmd]}" && redraw
	}
}
### TODO: make this make sense
function save {
	local name="$1"
	local -n savedcurrent_buffer="current_buffer${name}"	
   	local -n savedmenuline="menuline${name}"
	savedcurrent_buffer="$current_buffer"
	savedmenuline="${!menuline}"
}
function restore {
	local name="$1"
	local -n savedcurrent_buffer="current_buffer${name}"
	local -n savedmenuline="menuline${name}"
	current_buffer="${savedcurrent_buffer}"
	set-current
	declare -ng menuline="$savedmenuline"
}
###
function set-current {
	declare -ng buffer="${current_buffer}_buffer"
	declare -ng buffersyntax="${current_buffer}_buffersyntax"
	declare -ng bufferexpand="${current_buffer}_bufferexpand"
	declare -ng bufferdata="${current_buffer}_bufferdata"
}
function switch-to-buffer {
	redraw
	read-command "Switch to buffer: " readin
	current_buffer="$readin"
	set-current
}
function get-syntax {
	for syntax_setting in "${!syntax[@]}"; do
		[ "$syntax_setting" = "${bufferdata[filetype]}" ] && {
			syntax_function="${syntax[$syntax_setting]}"
			return 0
		}
	done
	syntax_function="${syntax[unknown]}"
}
function make-syntax {
	local -i syntaxline=1
	local -n linearray="${current_buffer}_syntax${syntaxline}"
	linearray=()
	buffersyntax=()
	comment=0
	local word=''
	bckIFS="${IFS}"
	IFS=''
	get-syntax
	while read -rsn1 char
	do
		case "$char" in
			' ')
				syntax-word
				word=''
				style none ' '
				continue;;
			'	')
				syntax-word
				word=''
				style tab "${options[tabchar]}"
				continue;;
			'')
				syntax-word
				word='' comment=0
				buffersyntax[syntaxline]+="${current_buffer}_syntax${syntaxline}"
				((syntaxline++))
				local -n linearray="${current_buffer}_syntax${syntaxline}"
				linearray=()
				continue;;
		esac
		word="${word}${char}"
	done
	IFS="${bckIFS}"
}
function syntax-word {
	(("${options[todonote]}"==1)) && {
		case "$word" in
			'NOTE:') style NOTE "${word}"; return ;;
			'TODO:') style TODO "${word}"; return ;;
		esac
	}
	"$syntax_function"
	style "$syntax_style" "$word"
}	
function style {
	IFS=' '
	[[ "$2" =~ ${2//?/(.)} ]]
	linearray+=("$(printf '%b' "\e[0;0m${style[${1}]}")${BASH_REMATCH[@]:1}")
	IFS=''
}
function set-style {
	syntax_style="$1"
}
function syntax-bash {
	((comment)) && set-style comment && return
	case "${word}" in
		*'=()'|'declare'|'local'|'typeset') set-style init;;
		'"$'*) set-style quotevar;;
		'#'*) set-style comment && comment=1;;
		'$'*) set-style variable;;
		'-'*) set-style option;;
		*'()') set-style fn;;
		'||'|'&&'|';'|'&') set-style flow;;
		'>'|'<'|'|'|'>>'|'<<'|'<<<') set-style pipe;;
		'('|')'|'{'|'}'|'[['|']]'|'['|']') set-style bracket;;
		'function') set-style fn;;
		*"'"*) set-style quote;;
		*'"'*) set-style dquote;;
		*'='*) set-style set;;
		'echo'|'return'|'case'|'esac'|'for'|'while'|'do'|'done'|'if'|'elif'|\
			'else'|'printf'|'fi'|'continue'|'exit'|'bind'|'then'|'break'|'read'|\
			'let'|'shopt'|'trap'|'set'|'eval'\
			) set-style keyword;;
		*) set-style none;;
	esac
}
function syntax-unknown {
	set-style none
}
function syntax-config {
	local word="$1"
	[[ "${word}" =~ "#" ]] && set-style comment && comment=1 && return
	((comment)) && set-style comment && return
	set-style none
}

function make-render {
	printf '%s\n' "${buffer[@]}" | make-syntax
	printf '%s\n' "${buffer[@]}" | expand-char | mapfile -t -O 1 bufferexpand
}
function make-render-line {
	bufferexpand[bufferdata[line]]="$(expand-char <<< "${buffer[bufferdata[line]]}")"
	local -i syntaxline=${bufferdata[line]}
	local -n linearray="${current_buffer}_syntax${syntaxline}"
	linearray=()
	comment=0
	local word=''
	bckIFS="${IFS}"
	IFS=''
	get-syntax
	while read -rsn1 char
	do
		case "$char" in
			' ')
				syntax-word
				word=''
				style none ' '
				continue;;
			'	')
				syntax-word
				word=''
				style tab "${options[tabchar]}"
				continue;;
			'')
				syntax-word
				word=''
				style none ' '
				IFS="${bckIFS}"
				return;;
		esac
		word="${word}${char}"
	done  <<< "${buffer[bufferdata[line]]}"
}

function expand-char {
	bckIFS="${IFS}"
	IFS=
	while read -rsn1 char
	do
		[ -z "$char" ] && echo && continue
		case "${char}" in
			'	')
				local -i i
				for ((i = ${#options[tabchar]}; i > 0 ; i--)); do
					printf '%s' "${charmap[	]}"
				done;;
			' ') printf '%s' "${charmap[ ]}";;
			*)
				printf '0';;
		esac
	done
	IFS="${bckIFS}"
}


keys_debuginput=(
	[18 0]='quit-debuginput'
)
key_options_debuginput=(
	[else]='insert-debug-hex'
)
function insert-debug-hex {
	buffer+=(
		"${input_hex[*]}"
	)
	copy-array buffer buffersyntax
	copy-array buffer bufferexpand
	buffer-lenght
	next-line
}
function inputcodes {
	save openfile
	declare -gn menuline=menulinedebug
	((current_count++))
	current_buffer="debuginput_${current_count}"
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='Get input codes'
		[mode]='debuginput'
		[help_message]='C-x (18 0) to close'
		[filetype]='i*'
		[file]='*debuginput*'
		[modified]=0
	)
	buffer=("")
	copy-array overlay bckover
	overlay=()
	update=0
	menulinedebug=(
		[quit]='quit-debuginput'
	)
	#clear-buffer
	#buffer=('')
	clear-screen
	redraw
}
function quit-debuginput {
	copy-array bckover overlay
	restore openfile
	redraw
}

function base-name {
	for file in "$@"; do
	    file="${file%/}"
	    printf '%s\n' "${file##*/}"
	done
}
function filetype {
	#very ugly, TODO: redo this
	local filename shebang extension
	local -a filenamesplit shebangsplit
	[ $# = 0 ] && return
	local bckIFS="$IFS"
	IFS='.'
	filename="${1%/}"
	filename="${filename##*/}"
	[ "$filename" = 'COMMIT_EDITMSG' ] && echo conf && return
	filenamesplit=($filename)
	extension="${filenamesplit[-1]}"
	[ "${#filenamesplit[@]}" -gt 1 ] && echo "$extension" && return
	mapfile -n 1 file_data < "$1"
	shebang="$(echo -n "${file_data[@]}")"
	case "${shebang:0:1}" in
		'#')
		shebang="${shebang%/}"
		IFS=' '
		shebangsplit=("${shebang##*/}")
		local shebangss=(${shebangsplit[-1]})
		case "${shebangss[0]}" in
			env)
				printf '%s\n' "${shebangss[1]}";;
			*)
				printf '%s\n' "${shebangsplit[-1]}";;
			esac
		;;
		'!')
			mapfile -d ' ' -t split <<< "${shebang}"
			printf '%s\n' "${split[1]}"
			;;
		*) echo unknown
	esac
	IFS="${bckIFS}"
}
function buffer-lenght {
	buffer_lenght="${#buffer[@]}"
	buffer_lenght="${#buffer_lenght}"
}
function find-file {
	printf '\e[%s;0H' $((sizy + offy))
	printf '\e[?25h'
	bind 'set disable-completion off' 2>/dev/null # Enable completion
	read -re -p "${options[file_prompt]}" command && {
		read-buffer "$command"
		[ -n "$bckmode" ] && bufferdata[mode]="$bckmode" || bufferdata[mode]=edit
		redraw
	}
	bind 'set disable-completion on' 2>/dev/null

}
function read-buffer {
	((current_count++))
	current_buffer="file_${current_count}"
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	declare -ng menuline=menulineedit # Set default menuline for file editing
	bufferdata=(
		[line]=0 # Currently selected line (0 means the buffer is empty)
		[base]=1 # Top-most line shown
		[column]=0 # Position of the cursor in $line
		[info]="${version}: insanity" # Feedback text in the status bar
		[mode]="${options[default_mode]}"
		[help_message]="${options[help_message]}"
		[filetype]="$(filetype "$1")"
		[file]="$1"
		[basecolumn]=0
	)
	mapfile -t -O 1 "${current_buffer}_buffer" <"${bufferdata[file]}" # Read file into an array
	buffer-lenght
	make-render # TODO: make fast
	if [[ "${buffer[*]}" ]]; then # Ensure that something was actually read into the file
		bufferdata[line]=1 # Indicate that we have a buffer loaded
		bufferdata[modified]=0
		bufferdata[info]="${bufferdata[file]}: ${#buffer[@]}"
	else
		bufferdata[info]="${bufferdata[file]}: empty"
	fi
}
function clear-buffer {
	buffer=()
	buffersyntax=()
	bufferexpand=()
	bufferdata=()
}

function topline {
	local -i ln=${#1}
	printf "${style[windowline]}%s\e[?25l%*s" "$1" "$(( $sizx - ln ))"
}
function toggle_hidden {
	((hidden==0)) && hidden=1 || hidden=0
	dired
}
function dired {
	declare -gn menuline=diredmenu
	((current_count++))
	current_buffer="dired_${current_count}"
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='File picker'
		[mode]='dired'
		[help_message]='Pick a file'
		[filetype]='i*'
		[file]='*dired*'
		[modified]=0
	)
	mapfile -t -O 1 buffer <<< "$(pickls)"
	for idx in "${!buffer[@]}"; do
		if [ -d "${buffer[idx]}" ]; then
			buffersyntax[idx]="$(printf ${style[link]})""${buffer[idx]}"
		else
			buffersyntax[idx]="${buffer[idx]}"
		fi
		bufferexpand[idx]="${buffer[idx]}"
	done
	buffer-lenght # drowning in sea of murky logic
	if [[ "${buffer[1]}" ]]; then # Ensure that something was actually read into the file
		bufferdata+=(
			[line]=1
			[info]="$PWD"
		)
	else
		bufferdata[info]="error: empty"
	fi
	redraw
}
function dired-select {
	local line="${buffer[bufferdata[line]]}"
	if [ -d "$line" ]; then
		cd "$line"
		dired
	else
		read-buffer "$line" || exit 1
		redraw
	fi
}
function pickls {
	((hidden==0)) && printf '..\n' || printf '%s\n' .*
	printf '%s\n' *
}
function copy-array {
	local -n source="$1"
	local -n target="$2"
	for idx in "${!source[@]}"; do
		target[idx]="${source[idx]}"
	done
}

function about {
	save openfile
	((current_count++))
	current_buffer="about_${current_count}"
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	copy-array overlay bckover
	overlay=()
	update=0
	set-buffers about
	#sizx=$((COLUMNS / 2))
	#sizy=$((LINES / 3))
	#offx=$((COLUMNS / 2 - COLUMNS / 4))
	#offy=$((LINES / 2 - LINES / 6))
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='About Ebashs'
		[mode]='view'
		[help_message]='About'
		[filetype]='i*'
		[file]='*about*'
		[modified]=0
	)
	declare -gn menuline=menulineabout
	menulineabout=(
		[quit]='quit-view'
	)
	mapfile -t -O 1 buffer <<EOF
This is Ebashs, one component of the Bash/Bash operating system.

An editor written in pure bash via nonsense sphagetti code trying copying emacs.

Repo                     https://github.com/aeknt/spis
                         Ebashs comes with ABSOLUTELY NO WARRANTY




Based on                 https://github.com/comfies/bed
EOF
	copy-array buffer buffersyntax
	copy-array buffer bufferexpand
	clear-screen
	redraw
}
function quit-view {
	copy-array bckover overlay
	restore openfile
	redraw
}

function write-buffer {
    true >"${bufferdata[file]}" # Set the file to an empty text file
    for ln in "${buffer[@]}"; do # Write in the buffer to the file
        echo "$ln" >>"${bufferdata[file]}"
    done
    bufferdata[modified]=0
    message="Wrote ${#buffer[@]} lines to '$file'"
}

function newline {
	bufferdata[modified]=1
	buffer=("" "${buffer[@]:1:${bufferdata[line]}-1}" "" "${buffer[@]:${bufferdata[line]}}")
	unset 'buffer[0]'
	buffer[bufferdata[line]]="${buffer[${bufferdata[line]}+1]:0:${bufferdata[column]}}"
	buffer[bufferdata[line]+1]="${buffer[${bufferdata[line]}+1]:${bufferdata[column]}:${#buffer[${bufferdata[line]}+1]}}"
	bufferdata[column]=0
	buffer-lenght
	make-render
	next-line
}

function delete-line {
	bufferdata[modified]=1
	buffer=("" "${buffer[@]:1:${bufferdata[line]}-1}" "${buffer[@]:${bufferdata[line]}+1}")
	unset 'buffer[0]'
	((bufferdata[line] > ${#buffer[@]})) && previous-line
	bufferdata[modified]=true
	buffer-lenght
	make-render
	redraw
}

function backspace {
	if [ "${#buffer[${bufferdata[line]}]}" = 0 ]; then
		delete-line
		bufferdata[column]="${#buffer[${bufferdata[line]}]}"
		redraw
		return 0
	fi
	local -i rlr
	unset ta
	local ta
	ta=${bufferexpand[${bufferdata[line]}]:0:${bufferdata[column]}}
	ta=${ta//[^t]}
	ta=${#ta}
	rlr=$((bufferdata[column] + ta / 4 - ta))
	if [ $rlr = 0 ]; then
		buffer[${bufferdata[line]}-1]="${buffer[${bufferdata[line]}-1]}${buffer[${bufferdata[line]}]}"
		delete-line
		bufferdata[column]=${#bufferexpand[${bufferdata[line]}]}
		redraw
		return 0
	fi
	buffer[${bufferdata[line]}]="${buffer[${bufferdata[line]}]:0:$(( rlr - 1 ))}${buffer[${bufferdata[line]}]:${rlr}}"
	backward-char #go back with cursor
	make-render-line # copy the buffer into buffersyntax and bufferexpand
	redraw #draw it
	bufferdata[modified]=1
}
declare -A keys_quit
keys_quit=(
	[79 0]='save-quit'
	[6e 0]='die'
	[63 0]='quit-quit'
)
function save-quit {
	write-buffer
	die
}
function quit-quit {
	bufferdata[mode]="$bckmode"
	message='Quit canceled'
	redraw
}
function quit {
	if ((bufferdata[modified])); then
		[ -z "$bckmode" ] && bckmode="${bufferdata[mode]}"
		bufferdata[mode]='quit'
		redraw-statusline
		printf '\e[%s;0H' $((sizy + offy))
		printf '%s' 'Buffer modified, save before close? [Y/n/c]'
	else
		die
	fi
}

function previous-line {
	for ((i = 0; i < ${1:-1}; i++)); do
		((bufferdata[line] > 1)) && ((bufferdata[line]--)) # As long as we can keep going up, go up
		((bufferdata[line] < bufferdata[base] + 1)) && ((bufferdata[base]--)) && # Push back the top if we need to
			((bufferdata[base] <= 0)) && bufferdata[base]=1 # Don't push back if our base is at 1
		[ -z "$bckrl" ] && bckrl="${bufferdata[column]}"
		(( "${#buffer[${bufferdata[line]}]}" < bufferdata[column] )) && bufferdata[column]="${#buffer[${bufferdata[line]}]}"
		(( "${#buffer[${bufferdata[line]}]}" > bufferdata[column] )) && bufferdata[column]=${bckrl}
	done
	redraw
}

function scroll-down {
    previous-line $((sizy - 3))
}

function next-line {
	for ((i = 0; i < ${1:-1}; i++)); do
		((bufferdata[line] < ${#buffer[@]}+1)) && ((bufferdata[line]++)) # If we can go down, go down
		((bufferdata[line] > bufferdata[base] + sizy - 3 - bottomlines)) && ((bufferdata[base]++)) # Move window down if needed
			[ -z "$bckrl" ] && bckrl="${bufferdata[column]}"
		(( "${#buffer[${bufferdata[line]}]}" < bufferdata[column] )) && bufferdata[column]="${#buffer[${bufferdata[line]}]}"
		(( "${#buffer[${bufferdata[line]}]}" > bufferdata[column] )) && bufferdata[column]=${bckrl}
	done
	redraw
}

function scroll-up {
    next-line $((sizy - 3))
}

function execute {
    ((bufferdata[line] == 0)) && return # If the line is not possible, do nothing
    printf '\e[?25h\e[%sH' "$((bufferdata[line] + 2 - bufferdata[base]))" # Reset cursor position and enable cursor
    read -re -p "$(printf '%4s ' "$")" # Present editable line
    if [[ "$REPLY" != "${buffer[${bufferdata[line]}]}" ]]; then # If the line is changed, update and inform
        buffer[${bufferdata[line]}]="$($REPLY)"
        bufferdata[modified]=1
    fi
    make-render
    redraw
}

function forward-char {
	for ((i = 0; i < ${1:-1}; i++)); do
		case "${bufferexpand[${bufferdata[line]}]:${bufferdata[column]}+1:1}" in
			't') bufferdata[column]=$(( bufferdata[column] + ${#options[tabchar]}));;
			*) ((bufferdata[column]++));;
		esac
		((bufferdata[column] > ${#bufferexpand[${bufferdata[line]}]})) && { bufferdata[column]=0; next-line; }
		bckrl=
	done
	((bufferdata[column] > (sizx+offx) - (buffer_lenght + 1) -3 )) && {
		((bufferdata[basecolumn]++))
		((bufferdata[column]--))
		redraw
	}
	redraw-statusline
	redraw-cursor
}
function backward-char {
	for ((i = 0; i < ${1:-1}; i++)); do
		case "${bufferexpand[${bufferdata[line]}]:${bufferdata[column]}-1:1}" in
			't') bufferdata[column]=$(( bufferdata[column] - ${#options[tabchar]}));;
			*) ((bufferdata[column]--));;
		esac
		((bufferdata[column] < 0)) && ((bufferdata[line]==1)) && {
			bufferdata[line]=1
			bufferdata[column]=0
		}
		((bufferdata[column] < 0)) && {
			previous-line
			bufferdata[column]="${#bufferexpand[${bufferdata[line]}]}"
		}
		((bufferdata[column] < 2 )) && ((bufferdata[basecolumn] > 0)) && {
			((bufferdata[basecolumn] > 0)) && ((bufferdata[basecolumn]--))
			((bufferdata[column]++))
			redraw
		}
	done
	bckrl=
	redraw-statusline
	redraw-cursor
}
function move-beginning-of-line {
	bufferdata[column]=0
	redraw-statusline
	redraw-cursor
}
function move-end-of-line {
	bufferdata[column]="${#bufferexpand[${bufferdata[line]}]}"
	redraw-statusline
	redraw-cursor
}

function forward-word {
	((bufferdata[column] == ${#bufferexpand[bufferdata[line]]})) && {
		next-line
		move-beginning-of-line
	}
	while :; do
		((bufferdata[column] < ${#bufferexpand[bufferdata[line]]})) && ((bufferdata[column]++)) || break
		case "${bufferexpand[bufferdata[line]]:${bufferdata[column]}:1}" in
			't'|'s') break;;
		esac
	done
	redraw
}
function backward-word {
	((bufferdata[column] == 0)) && {
		previous-line
		move-end-of-line
	}
	while :; do
		((bufferdata[column] > 0)) && ((bufferdata[column]--)) || break
		case "${bufferexpand[bufferdata[line]]:${bufferdata[column]}:1}" in
			't'|'s') break;;
		esac
	done
	redraw
}

function shell {
	clear-screen
	bash # NOTE: in theory an external command
	redraw
}

function die {
    echo -e "\e[?1000;1006;1015l" #disable mouse tracking
	clear-screen # TODO fix the buffer switching
	printf '\e[?25h\e[?7h\e[?1049l' # Reset terminal to sane mode
    exit "${errno:-0}" # Assume that we are exiting without an error
}
function toggle-mouse {
	(("${options[mouse]}"==1)) && {
		echo -ne "\e[?1000;1006;1015l"
		options[mouse]=0
		message="Disabled options[mouse]"
		return
		}
	(("${options[mouse]}"==0)) && {
		echo -ne "\e[?1000;1006;1015h"
		options[mouse]=1
		message="Enabled options[mouse]"
		return
	}
}
function menuclick {
	#determine which item should be triggered
	[ -z "$1" ] && menulinep=0 || menulinep=$1
	local cx="$offx"
	for a in "${!menuline[@]}"; {
		la="${#a}"
		((menulinep>cx)) && ((menulinep<(cx + la + 1))) && ${menuline[$a]}
		cx=$(( cx + la + 1 ))
	}
}
function menudraw {
	printf '\e[?25l'
	printf '\e[%s;0H' $menulinepy
	local mi=0
	for action in "${!menucon[@]}"; do
		if ((mi == menuselection)); then
			printf "\e[%sC${style[menuitemselected]}%s${reset}\n" $menulinep "$action"  
		else
			printf "\e[%sC${style[menuitem]}%s${reset}\n" $menulinep "$action"
		fi
		((mi++))
	done
}
function menuup {
	((menuselection > 0)) && ((menuselection--))
	menudraw
}
function menudown {
	((menuselection < ${#menucon[@]} -1)) && ((menuselection++))
	menudraw
}
function menuselect {
	local mi=0
	for action in "${!menucon[@]}"; do
		((mi == menuselection)) && "${menucon[$action]}"
		((mi++))
	done
}
function menuleave {
	ismenu=0
	bufferdata[mode]="${modebackup}"
	overlay=()
	redraw
}
function menu {
	((ismenu == 0 )) && modebackup="${bufferdata[mode]}"
	ismenu=1
	declare -ig menuselection=0
	bufferdata[mode]='menu'
	overlay+=('menudraw')
	redraw
}

function redraw {
	bckIFS="$IFS"
	printf '\e[?25l'
	((update==1)) && {
		sizx=$COLUMNS
		sizy=$((LINES - 1))
	}
	(("${options[menuline]}"==1)) && {
		printf "\e[0m\e[%s;%sH${style[menuline]}\e[?25l%*s\r%s" "$offy" "$offx" "$sizx" "${bufferdata[help_message]}"
		printf '\e[%sG%s\e[0m\n' "$offx" "${!menuline[*]}"
	} || printf "\e[%s;%sH" "$offy" "$offx"
	# Iterate over shown lines
	IFS=''
	for ((i = bufferdata[base]; i - bufferdata[base] < sizy - ( bottomlines + toplines ) + 1; i++)); do
		printf "${style[number]}"
		((i == bufferdata[line])) && printf "${style[numberselected]}" # Highlight line number if selected
		((i > ${#buffer[@]})) && printf "\e[%sG${style[numberempty]}\e[K%$((buffer_lenght/2))s~\e[m\n" "$offx"\
				|| {
				# cut the line to fit requested size
				# due to escape codes present in buffersyntax, the buffersyntax has to be multidimensional nonsense for perfomance reasons
				local -n linearray="${buffersyntax[i]}"
				printf "\e[%sG\e[K%${buffer_lenght}s\e[m %s\n" "$offx" "$i" "${linearray[*]:bufferdata[basecolumn]:(sizx+offx) - (buffer_lenght + 1)}"
			}
	done
	IFS="$bckIFS"
	redraw-statusline
	redraw-commandline
	redraw-cursor
	# Render all overlays
	for o in "${overlay[@]}"; {
		"${o}"
	}
}
function redraw-cursor {
	printf '\e[?25h\e[%s;%sH' $((bufferdata[line] + 1 - bufferdata[base] + offy)) $((bufferdata[column] + buffer_lenght + 2 + offx)) # move cursor to the line
}
function redraw-statusline {
	printf "\e[%s;%sH\n\e[%sG${style[infoline]}%*s\e[%sG%s %s (%s,%s) (screen: %s)\e[m" \
	       $((sizy - 2 + offy)) $((sizx + offx)) "$offx" $((sizx)) "${bufferdata[info]}" "$offx" \
	       "${bufferdata[mode]}" "$(base-name "${bufferdata[file]}")[${bufferdata[filetype]}]" "${bufferdata[line]}" "${bufferdata[column]}" "$current_buffer"
}
function redraw-commandline {
	printf "\e[%s;%sH\n${style[commandline]}%*s\r%s\e[m" \
	       $((sizy - 1 + offy)) $((sizx + offx)) $sizx ' ' "$message"
}

function input-make-hex {
	input_hex=()
	local -i i=0
	echo "$1" | {
		while read -rsn1; do
			input_hex[i]="$(printf "%x\n" "'${1:$i}")"
			((i++))
		done
	}
}
function insert-word {
	local -i rlr
	unset ta
	local ta
	ta=${bufferexpand[${bufferdata[line]]}:0:${bufferdata[column]}}
	ta=${ta//[^t]}
	ta=${#ta}
	rlr=$((bufferdata[column] + ta / 4 - ta))	
	buffer[line]="${buffer[${bufferdata[line]}]:0:${rlr}}$1${buffer[${bufferdata[line]}]:${rlr}}" #add at cursor position - amount of tabs * tab size
	make-render-line
	forward-char "${#1}"
	redraw
	bufferdata[modified]=1
}
function input-key {
	local -i x y mode_contains
	input-make-hex "$1"

	local -n modekeys="keys_${bufferdata[mode]}"
	for str in "${!modekeys[@]}"; do
		[ "$str" = "${input_hex[*]}" ] && {
			"${modekeys[$str]}"
			mode_contains=1
		}
	done
	((mode_contains == 0)) && {
		local -n key_options="key_options_${bufferdata[mode]}"
		((${#key_options[@]})) && {
			[ -n "${key_options[else]}" ] && "${key_options[else]}"
		}
	}
	((mode_contains == 1)) && {
		return
	}
	[ "${bufferdata[mode]}" = 'edit' ] || return
	
	(("${options[mouse]}"==1)) && {
		#parse mouse stuff somewhatish weirdly
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 36 34' ] && previous-line && return
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 36 35' ] && next-line && return
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 38 30' ] && previous-line 9 && return
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 38 31' ] && next-line 9 && return
		((skipnext==1)) && skipnext=0 && return
		((skipnext==0)) && [ "${input_hex[*]:0:2}" = '1b 5b' ] && {
			mapfile -t -d '' inputarray <<< "${1}"
			inputarray[-1]="${inputarray[-1]%?}"
			[ -z "${inputarray[2]}" ] && skipnext=1
			mapfile -t -d ';' inputarray <<< "${inputarray[1]}"
			inputarray[-1]="${inputarray[-1]%?}"	
			mousemode="${inputarray[0]}"
			x="${inputarray[1]}"
			y="${inputarray[2]::-1}"
			#limitations of movenment
			#TODO:
			[ $y = "$offy" ] && menuclick $x && return #handle menuline
			((x < (buffer_lenght + offx + 2))) && {
				if [ "$mousemode" = '[<0' ]; then
					bufferdata[line]=$(( bufferdata[base] + ( (y - offy) - toplines) ))
					redraw
				elif [ "$mousemode" = '[<2' ]; then #VERY BAD SOLUTION, TODO: FIX
					clear-screen
					echo enter line number
					read -re line
					redraw
				fi
				return
			}
			bufferdata[line]=$(( bufferdata[base] + ( y - offy - 1) ))
			bufferdata[column]=$(( x - (offx + buffer_lenght + 2) ))
			((bufferdata[line] > ${#bufferexpand[@]})) && bufferdata[line]=${#bufferexpand[@]}
			((bufferdata[column] > ${#bufferexpand[bufferdata[line]]})) && bufferdata[column]=${#bufferexpand[bufferdata[line]]}
			redraw
			return
		}
	}
	#[ "${input_hex[*]:0:3}" = '1b 5b 3c' ] && return
	[ "${input_hex[*]:0:1}" = '1b' ] && return # TODO: prevent escape codes without hacky blocking
	[ "${bufferdata[mode]}" = edit ] && {
		local -i rlr
		unset ta
		local ta
		ta=${bufferexpand[${bufferdata[line]}]:0:${bufferdata[column]}}
		ta=${ta//[^t]}
		ta=${#ta}
		rlr=$((bufferdata[column] + ta / 4 - ta))	
		buffer[bufferdata[line]]="${buffer[${bufferdata[line]}]:0:${rlr}}${1}${buffer[${bufferdata[line]}]:${rlr}}" #add at cursor position - amount of tabs * tab size
		#go right with cursor
		make-render-line
		forward-char
		redraw
		[ "$1" = '	' ] && printf '\e[%sC' $((${#options[tabchar]} - 1))
		bufferdata[modified]=1
	}
}
function main {
	(("${options[mouse]}")) && echo -ne "\e[?1000;1006;1015h" #enable mouse tracking
    if [[ "$1" ]]; then # If a file was provided in the terminal pre-load it
        if [ -d "$1" ]; then
			cd "$1" || exit
			dired # enter the file selector in specified folder
		else
			read-buffer "$1"
		fi
    else
		dired # enter the file selector
	fi
	begin
}
function begin {
	redraw
	while :; do
		local -a k=()
		local -i i=1    
		if read -rsN1 -t"${options[refresh_timeout]}" k[0]; then # Check for ready input
			while read -rsN1 -t0.0001 k[$i]; do ((i++)); done # Multibyte hack
			input-key "$(printf '%s' "${k[@]}")" # Handle keypress event
		fi
	done
}

main "$@"
