#!/bin/bash
version="0.4.0-WIP-2"
# Ebashs: text editor written in pure bash powered by murky logic and mess
shopt -s lastpipe # For syntax
shopt -s extglob # Ensure advanced pattern matching is available
shopt -s checkwinsize; (:;:) # Enable and then trigger a terminal size refresh
trap redraw WINCH ALRM # Attach WINCH and ALRM to redraw the screen
trap die EXIT HUP USR1 # Attach most exit codes to cleanup and exit
trap quit INT
trap quit SIGTERM

declare -A syntax style options charmap commands
declare -A menulineedit menulineabout diredmenu menulinedebug
declare -A menufile menuhelp menukey menudebug menufancy
declare -A keys_def keys_edit keys_prefix keys_dired keys_view keys_menu keys_debuginput keys_prefix_help keys_list_buffers
declare -A key_options_menu key_options_debuginput key_options_list_buffers
declare -a input_hex overlay listbuffers
declare -n buffer buffersyntax bufferexpand bufferdata
declare -i menulinep menulinepy buffer_lenght toplines bottomlines hidden update ismenu comment current_count
declare -n menucon menuline
declare message reset readin


### Config options
## General options
options=(
	[mouse]=0
	[todonote]=1
	[menuline]=1
	[tabchar]='│   '
	[file_prompt]='Path: '
	[command_prompt]='M-x '
	[cancelhex]='18 0'
	[default_mode]='edit'
	[help_message]='(F10 to open menu)'
	[dired_message]='Pick a file'
	[render_chunk]=8
	[tile_mode]='vertical'
)
## Key bindings configuration
#      A keybindings for a mode x have to be in associative array named keys_${x}, else spis won't see them
#      keys_def is special case containing the common definitions.
#      It isn't used by itself anywhere, it exists purely for simplification.
#
#      A options for the keybings of given mode are defined by ass. array named key_options_${x}
#          [else] option defines what should happen if the input wasn't any of keys defined in keybings
keys_def=(
	[previous_line]='1b 5b 41 0'
	[next_line]='1b 5b 42 0'
	[forward_char]='1b 5b 43 0'
	[backward_char]='1b 5b 44 0'
	[scroll_down]='1b 5b 35 7e 0'
	[scroll_up]='1b 5b 36 7e 0'
	[select]='0'
)
keys_edit=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[forward_char]}]='forward-char'
	[${keys_def[backward_char]}]='backward-char'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	#[1b 5b 31 3b 32 41 0]='select_up'
	#[1b 5b 31 3b 32 42 0]='select_down'
	#[1b 5b 31 3b 32 43 0]='select_right'
	#[1b 5b 31 3b 32 44 0]='select_left'
	# TODO: selection
	[18 0]='prefix'
	[8 0]='prefix-help'
	[1b 5b 32 31 7e 0]='menulinemenu'
	[10 0]='previous-line'
	[e 0]='next-line'
	[6 0]='forward-char'
	[1b 66 0]='forward-word'
	[2 0]='backward-char'
	[1b 62 0]='backward-word'
	[10 0]='scroll-down'
	[16 0]='scroll-up'
	[0]='newline'
	[c 0]='newline'
	[14 0]='execute'
	[4 0]='delete-line'
	[13 0]='shell'
	[7f 0]='backspace'
	[1b 71 0]='die'
	[1b 67 0]='menukey'
	[1b 78 0]='execute-extended-command'
	[1 0]='move-beginning-of-line'
	[1b 5b 48 0]='move-beginning-of-line'
	[5 0]='move-end-of-line'
	[1b 5b 46 0]='move-end-of-line'
)
keys_dired=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[forward_char]}]='forward-char'
	[${keys_def[backward_char]}]='backward-char'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	[${keys_def[select]}]='dired-select'
	[68 0]='toggle_hidden'
)
keys_view=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[forward_char]}]='forward-char'
	[${keys_def[backward_char]}]='backward-char'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	[${keys_def[select]}]='quit-view'
)
keys_list_buffers=(
	[${keys_def[previous_line]}]='previous-line'
	[${keys_def[next_line]}]='next-line'
	[${keys_def[scroll_down]}]='scroll-down'
	[${keys_def[scroll_up]}]='scroll-up'
	[${keys_def[select]}]='buffer-select'
)
key_options_list_buffers=(
	[else]='quit-view'
)
keys_prefix=(
	[18 0]='quit'
	[7 0]='quit-prefix'
	[13 0]='write_buffer'
	[6 0]='find-file'
	[2 0]='list-buffers'
	[62 0]='switch-to-buffer'
)
keys_prefix_help=(
	[7 0]='quit-prefix'
	[1 0]='about'
	[72 0]='manual'
)
keys_menu=(
	[${keys_def[previous_line]}]='menuup'
	[${keys_def[next_line]}]='menudown'
	[${keys_def[select]}]='menuselect'
)
key_options_menu=(
	[else]='menuleave'
)
## Style
#      Defined in escape codes.
style=(
	[none]='\e[m'
	[TODO]='\e[0;97;45m'
	[NOTE]='\e[0;97;100m'
	[menuline]='\e[0;37;40m'
	[menuitem]='\e[0;37;40m'
	[selected]='\e[30;45m'
	[link]='\e[94m'
	[menuitemselected]='\e[30;45m'
	[infoline]='\e[40;97m'
	[number]='\e[0;90m'
	[numberempty]='\e[0;90m'
	[numberselected]='\e[0;91m'
	[tab]='\e[0;90m'
	#syntax
	[quotevar]='\e[0;36;48m'
	[comment]='\e[3;37;48m'
	[variable]='\e[0;96m'
	[option]='\e[0;93m'
	[flow]='\e[0;93m'
	[pipe]='\e[1;94m'
	[bracket]='\e[1;95m'
	[quote]='\e[0;92m'
	[dquote]='\e[0;32m'
	[set]='\e[0;94;108m'
	[fn]='\e[0;30;44m'
	[keyword]='\e[0;91m'
	[init]='\e[0;31m'
)
function menulinemenu {
	declare -ng menucon=menufancy
	#menulinepy=$(( bufferdata[size_y] - ${#menufancy[@]} ))
	menu
}
menulineedit=(
	[File]=menufile	[Help]=menuhelp
	[Keys]=menukey	    [Redraw]=refresh
	[Debug]=menudebug
)
function menufile { declare -ng menucon=menufile; menu; }
menufile=(
	[Quit       C-x C-c ]="quit"
	[Visit file C-x C-f ]="find-file"
	[Execute        C-t ]="execute"
	[Save       C-x C-s ]="write-buffer"
	[File picker        ]="dired"
)

function menuhelp { declare -ng menucon=menuhelp; menu; }
menuhelp=(
	[Keybinding          ]=menukey
	[About               ]=about
)

function menukey { declare -ng menucon=menukey; menu; }
menukey=(
	[Exit       C-x C-c ]="quit"
	[New Line   C-l | ⏎ ]="newline"
	[Set target     M-r ]="find-file"
	[Visit file C-x C-f ]="read-buffer"
	[Save file  C-x C-s ]="write-buffer"
	[Delete Line    C-d ]="delete-line"
	[Prev Line      C-p ]="previous-line"
	[Next Line      C-n ]="next-line"
	[Prev Page      C-y ]="scroll-down"
	[Next Page      C-v ]="scroll-up"
	[Execute        C-t ]="execute"
	[Shell          C-s ]="shell"
	[Force exist    M-q ]="die"
)

function menudebug { declare -ng menucon=menudebug; menu; }
menudebug=(
	[clear      ]=clear-screen
	[refresh    ]=refresh
	[backspace  ]=backspace
	[right      ]=forward-char
	[left       ]=backward-char
	[inputcodes ]=inputcodes
)

syntax=(
	[bash]=syntax-bash	[sh]=syntax-bash
	[ksh]=syntax-bash	[mksh]=syntax-bash
	[dash]=syntax-bash	[zsh]=syntax-bash
	[conf]=syntax-config	[unknown]=syntax-unknown
	[i*dired]=dired-render
)

commands=(
	[quit]='quit'
	[newline]='newline'
	[set-buffer-file]='find-file'
	[read-file]='read-buffer'
	[write-file]='write-buffer'
	[delete-line]='delete-line'
	[toggle-mouse]='toggle-mouse'
	[execute]='execute'
	[shell]='shell'
	[force-quit]='die'
	[about]='about'
	[backspace]='backspace'
	[menu]='menu'
	[menul]='menulinemenu'
	[input]='inputcodes'
	[scroll-up]='scroll-up'
	[scroll-down]='scroll-down'
	[dired]='dired'
	[switch-to-buffer]='switch-to-buffer'
	[list-buffers]='list-buffers'
	[tile]='tile-buffers'
	[vertical]='tile-vertical'
	[horizontal]='tile-horizontal'
)
diredmenu=(
	[toggle hidden \(h\)]="toggle_hidden"
)
## source extensions here
# source extensions/evil
## rest of this garbageware

menulinepy=0; menulinep=0 # menu positions
update=1
case "${options[menuline]}" in
	1) toplines=1;;
	0) toplines=0;;
esac
bottomlines=2
reset='\e[0;0m'
function update-menuline-menu {
	declare -Ag menufancy
	for item in "${!menulineedit[@]}"; do
		menufancy+=(["$(printf '%-12s' "$item")"]="${menulineedit["$item"]}")
	done
	menufancy+=([Quit        ]=quit)
}
update-menuline-menu
## charmap
#TODO: this will be usesfull for later implementation of ligatures and stuff
charmap=(
	#[0] is reserved for any unmapped char
	[	]='t' # tab
	[ ]='s' # space
	#[	-render]="${options[tabchar]}"
)


function clear-screen {
	printf "\033c" # clear
}

# getting the cursor position -- unused for now
#function getcy {
#	local pos
#	IFS='[;' read -p $'\e[6n' -d R -a pos -rs || echo "failed with error: $? ; ${pos[*]}"
#	echo "${pos[1]}"
#}
#function getcx {
#	local pos
#	IFS='[;' read -p $'\e[6n' -d R -a pos -rs || echo "failed with error: $? ; ${pos[*]}"
#	echo "${pos[2]}"
#}

function refresh {
	clear-screen
	message="reloaded..."
	make-render
	redraw
	message=
}
function switch-mode {
	bckmode="${bufferdata[mode]}"
	bufferdata[mode]="$1"
	redraw-statusline
}
function prefix {
	switch-mode prefix
}
function prefix-help {
	switch-mode prefix_help
}
function quit-prefix {
	bufferdata[mode]="$bckmode"
	unset bckmode
	redraw-statusline
}
function read-command {
	printf '\e[%s;0H' $((bufferdata[size_y] + bufferdata[position_y]))
	printf '\e[?25h'
	read -re -p "$1" "$2" || return 1
}
function execute-extended-command {
	read-command "${options[command_prompt]}" readin || return 1
	for lcmd in "${!commands[@]}"; {
		[ "$readin" = "$lcmd" ] && "${commands[$lcmd]}" && redraw
	}
}
### TODO: make this make sense
function save {
	local name="$1"
	local -n savedcurrent_buffer="current_buffer${name}"	
   	local -n savedmenuline="menuline${name}"
	savedcurrent_buffer="$current_buffer"
	savedmenuline="${!menuline}"
}
function restore {
	local name="$1"
	local -n savedcurrent_buffer="current_buffer${name}"
	local -n savedmenuline="menuline${name}"
	current_buffer="${savedcurrent_buffer}"
	set-current
	declare -ng menuline="$savedmenuline"
}
###
function set-current {
	declare -ng buffer="${current_buffer}_buffer"
	declare -ng buffersyntax="${current_buffer}_buffersyntax"
	declare -ng bufferexpand="${current_buffer}_bufferexpand"
	declare -ng bufferdata="${current_buffer}_bufferdata"
}
function switch-to-buffer {
	redraw
	read-command "Switch to buffer: " readin
	current_buffer="$readin"
	set-current
	redraw
}
add-to-list() {
	listbuffers+=("$current_buffer")
}
function list-buffers {
	save openfile
	current_buffer="list_buffers"
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	copy-array overlay bckover
	overlay=()
	update=0
	#bufferdata[size_x]=$((COLUMNS / 2))
	#bufferdata[size_y]=$((LINES / 3))
	#bufferdata[position_x]=$((COLUMNS / 2 - COLUMNS / 4))
	#bufferdata[position_y]=$((LINES / 2 - LINES / 6))
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='Currently open buffers'
		[mode]='list_buffers'
		[help_message]=''
		[filetype]='i*buffer-list'
		[file]='*Buffer List*'
		[modified]=0
		[raw]=1
	)
	declare -gn menuline=menulineabout
	menulineabout=(
		[quit]='quit-view'
	)
	copy-array listbuffers buffer
	redraw
}
buffer-select() {
	current_buffer="${buffer[bufferdata[line]]}"
	set-current
	[ "${bufferdata[mode]}" = 'prefix' ] && bufferdata[mode]="$bckmode"
	redraw
}

function get-syntax {
	for syntax_setting in "${!syntax[@]}"; do
		[ "$syntax_setting" = "${bufferdata[filetype]}" ] && {
			syntax_function="${syntax[$syntax_setting]}"
			return 0
		}
	done
	syntax_function="${syntax[unknown]}"
}

function make-render {
	((bufferdata[raw])) ||
		make-render-area "${bufferdata[base]}" $((bufferdata[base] + bufferdata[size_y] + bufferdata[position_y]))
}

function make-render-area {
	((bufferdata[raw])) && return
	local -i syntaxline="$1"
	local -n linearray="${current_buffer}_syntax${syntaxline}"
	linearray=()
	#buffersyntax=()
	bckeIFS="${IFS}"
	IFS=''
	get-syntax
	for ((l=syntaxline;l<${2};l++)); do
		((l > $2)) && break
		#make-render-line "$l"
		#style none "${buffer[l]}"
		local -n linearray="${current_buffer}_syntax${syntaxline}"
		linearray=()
		buffersyntax[syntaxline]="${current_buffer}_syntax${syntaxline}"
		((syntaxline++))
		make-render-iline "$l"
	done
	IFS="$bckeIFS"
}
function make-render-iline {
	line="$1"
	bufferexpand[line]="$(expand-char <<< "${buffer[line]}")"
	comment=0
	local word=''
	while read -rsn1 char
	do
		case "$char" in
			' ')
				syntax-word
				word=''
				style none ' '
				continue;;
			'	')
				syntax-word
				word=''
				style tab "${options[tabchar]}"
				continue;;
			'')
				syntax-word
				word=''
				style none ' '
				return;;
		esac
		word="${word}${char}"
	done  <<< "${buffer[line]}"
}

function make-syntax-whole {
	local -i syntaxline=1
	local -n linearray="${current_buffer}_syntax${syntaxline}"
	linearray=()
	buffersyntax=()
	comment=0
	local word=''
	bckIFS="${IFS}"
	IFS=''
	get-syntax
	while read -rsn1 char
	do
		case "$char" in
			' ')
				syntax-word
				word=''
				style none ' '
				continue;;
			'	')
				syntax-word
				word=''
				style tab "${options[tabchar]}"
				continue;;
			'')
				syntax-word
				word='' comment=0
				buffersyntax[syntaxline]+="${current_buffer}_syntax${syntaxline}"
				((syntaxline++))
				local -n linearray="${current_buffer}_syntax${syntaxline}"
				linearray=()
				continue;;
		esac
		word="${word}${char}"
	done
	IFS="${bckIFS}"
}
function syntax-word {
	(("${options[todonote]}"==1)) && {
		case "$word" in
			'NOTE:') style NOTE "${word}"; return ;;
			'TODO:') style TODO "${word}"; return ;;
		esac
	}
	"$syntax_function"
	style "$syntax_style" "$word"
}	
function style {
	IFS=' '
	[[ "$2" =~ ${2//?/(.)} ]]
	linearray+=("$(printf '%b' "\e[0;0m${style[${1}]}")${BASH_REMATCH[@]:1}")
	IFS=''
}
function set-style {
	syntax_style="$1"
}
function syntax-bash {
	((comment)) && set-style comment && return
	case "${word}" in
		*'=()'|'declare'|'local'|'typeset') set-style init;;
		'"$'*) set-style quotevar;;
		'#'*) set-style comment && comment=1;;
		'$'*) set-style variable;;
		'-'*) set-style option;;
		*'()') set-style fn;;
		'||'|'&&'|';'|'&') set-style flow;;
		'>'|'<'|'|'|'>>'|'<<'|'<<<') set-style pipe;;
		'('|')'|'{'|'}'|'[['|']]'|'['|']') set-style bracket;;
		'function') set-style fn;;
		*"'"*) set-style quote;;
		*'"'*) set-style dquote;;
		*'='*) set-style set;;
		'echo'|'return'|'case'|'esac'|'for'|'while'|'do'|'done'|'if'|'elif'|\
			'else'|'printf'|'fi'|'continue'|'exit'|'bind'|'then'|'break'|'read'|\
			'let'|'shopt'|'trap'|'set'|'eval'\
			) set-style keyword;;
		*) set-style none;;
	esac
}
function syntax-unknown {
	set-style none
}
function dired-render {
	[ -d "$word" ] && set-style link
	[ -f "$word" ] && set-style none
}
function syntax-config {
	((comment)) && set-style comment && return
	case "${word}" in
		'#'*) set-style comment && comment=1;;
		   *) set-style none;;
	esac
}

function make-render-line {
	line="$1"
	((${#1})) || local -i line=${bufferdata[line]}
	bufferexpand[line]="$(expand-char <<< "${buffer[line]}")"
	local -i syntaxline=$line
	local -n linearray="${current_buffer}_syntax${syntaxline}"
	linearray=()
	comment=0
	local word=''
	bckIFS="${IFS}"
	IFS=''
	get-syntax
	while read -rsn1 char
	do
		case "$char" in
			' ')
				syntax-word
				word=''
				style none ' '
				continue;;
			'	')
				syntax-word
				word=''
				style tab "${options[tabchar]}"
				continue;;
			'')
				syntax-word
				word=''
				style none ' '
				IFS="${bckIFS}"
				return;;
		esac
		word="${word}${char}"
	done  <<< "${buffer[line]}"
}

function expand-char {
	bckIFS="${IFS}"
	IFS=
	while read -rsn1 char
	do
		[ -z "$char" ] && echo && continue
		case "${char}" in
			'	')
				local -i i
				for ((i = ${#options[tabchar]}; i > 0 ; i--)); do
					printf '%s' "${charmap[	]}"
				done;;
			' ') printf '%s' "${charmap[ ]}";;
			*)
				printf '0';;
		esac
	done
	IFS="${bckIFS}"
}


keys_debuginput=(
	[18 0]='quit-debuginput'
)
key_options_debuginput=(
	[else]='insert-debug-hex'
)

function insert-debug-hex {
	buffer+=(
		"${input_hex[*]}"
	)
	#copy-array buffer buffersyntax
	#copy-array buffer bufferexpand
	buffer-lenght
	next-line
	make-render-line
}
function inputcodes {
	save openfile
	declare -gn menuline=menulinedebug
	((current_count++))
	current_buffer="debuginput_${current_count}"
	add-to-list # add buffer to list of active buffers
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='Get input codes'
		[mode]='debuginput'
		[help_message]='C-x (18 0) to close'
		[filetype]='i*term'
		[file]='*debuginput*'
		[modified]=0
		[raw]=1
	)
	buffer=("")
	copy-array overlay bckover
	overlay=()
	update=0
	menulinedebug=(
		[quit]='quit-debuginput'
	)
	#clear-buffer
	#buffer=('')
	clear-screen
	redraw
}
function quit-debuginput {
	copy-array bckover overlay
	restore openfile
	redraw
}

function base-name {
	for file in "$@"; do
	    file="${file%/}"
	    printf '%s\n' "${file##*/}"
	done
}
function filetype {
	#very ugly, TODO: redo this
	local filename shebang extension
	local -a filenamesplit shebangsplit
	[ $# = 0 ] && return
	local bckIFS="$IFS"
	IFS='.'
	filename="${1%/}"
	filename="${filename##*/}"
	[ "$filename" = 'COMMIT_EDITMSG' ] && echo conf && return
	filenamesplit=($filename)
	extension="${filenamesplit[-1]}"
	[ "${#filenamesplit[@]}" -gt 1 ] && echo "$extension" && return
	mapfile -n 1 file_data < "$1"
	shebang="$(echo -n "${file_data[@]}")"
	case "${shebang:0:1}" in
		'#')
		shebang="${shebang%/}"
		IFS=' '
		shebangsplit=("${shebang##*/}")
		local shebangss=(${shebangsplit[-1]})
		case "${shebangss[0]}" in
			env)
				printf '%s\n' "${shebangss[1]}";;
			*)
				printf '%s\n' "${shebangsplit[-1]}";;
			esac
		;;
		'!')
			mapfile -d ' ' -t split <<< "${shebang}"
			printf '%s\n' "${split[1]}"
			;;
		*) echo unknown
	esac
	IFS="${bckIFS}"
}
function buffer-lenght {
	buffer_lenght="${#buffer[@]}"
	buffer_lenght="${#buffer_lenght}"
}
function find-file {
	printf '\e[%s;0H' $((bufferdata[size_y] + bufferdata[position_y]))
	printf '\e[?25h'
	bind 'set disable-completion off' 2>/dev/null # Enable completion
	read -re -p "${options[file_prompt]}" command && {
		read-buffer "$command"
		[ -n "$bckmode" ] && bufferdata[mode]="$bckmode" || bufferdata[mode]=edit
		redraw
	}
	bind 'set disable-completion on' 2>/dev/null

}
function draw-raw {
	( # draw something for nice transition
		bufferdata[raw]=1
		redraw
	)
}
function size-full {
	bufferdata+=(
		[position_x]=0
		[position_y]=1
		[size_x]=$COLUMNS
		[size_y]=$((LINES - 1))
	)
}
function read-buffer {
	((current_count++))
	current_buffer="file_${current_count}"
	add-to-list
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	declare -ng menuline=menulineedit # Set default menuline for file editing
	bufferdata=(
		[line]=0 # Currently selected line (0 means the buffer is empty)
		[base]=1 # Top-most line shown
		[column]=0 # Position of the cursor in $line
		[info]="${version}: insanity" # Feedback text in the status bar
		[mode]="${options[default_mode]}"
		[help_message]="${options[help_message]}"
		[filetype]="$(filetype "$1")"
		[file]="$1"
	)
	size-full
	mapfile -t -O 1 "${current_buffer}_buffer" <"${bufferdata[file]}" # Read file into an array
	buffer-lenght
	draw-raw
	#make-render # TODO: make fast
	if [[ "${buffer[*]}" ]]; then # Ensure that something was actually read into the file
		bufferdata[line]=1 # Indicate that we have a buffer loaded
		bufferdata[modified]=0
		bufferdata[info]="${bufferdata[file]}: ${#buffer[@]}"
	else
		bufferdata[info]="${bufferdata[file]}: empty"
	fi
}
function clear-buffer {
	buffer=()
	buffersyntax=()
	bufferexpand=()
	bufferdata=()
}

function topline {
	local -i ln=${#1}
	printf "${style[windowline]}%s\e[?25l%*s" "$1" "$(( ${bufferdata[size_x]} - ln ))"
}
function toggle_hidden {
	((hidden==0)) && hidden=1 || hidden=0
	dired
}
function dired {
	declare -gn menuline=diredmenu
	((current_count++))
	current_buffer="dired_${current_count}"
	add-to-list
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='File picker'
		[mode]='dired'
		[help_message]='Pick a file'
		[filetype]='i*dired'
		[file]='*dired*'
		[modified]=0
	)
	size-full
	mapfile -t -O 1 buffer <<< "$(pickls)"
	buffer-lenght # drowning in sea of murky logic
	make-render
	if [[ "${buffer[1]}" ]]; then # Ensure that something was actually read into the file
		bufferdata+=(
			[line]=1
			[info]="$PWD"
		)
	else
		bufferdata[info]="error: empty"
	fi
	redraw
}
function dired-select {
	local line="${buffer[bufferdata[line]]}"
	if [ -d "$line" ]; then
		cd "$line"
		dired
	else
		read-buffer "$line" || exit 1
		redraw
	fi
}
function pickls {
	((hidden==0)) && printf '..\n' || printf '%s\n' .*
	printf '%s\n' *
}

# A univeral functions to copy both normal and associative arrays
function copy-array {
	local -n source="$1"
	local -n target="$2"
	target=()
	for idx in "${!source[@]}"; do
		target[idx]="${source[idx]}"
	done
}
function about {
	save openfile
	((current_count++))
	current_buffer="about_${current_count}"
	add-to-list
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	copy-array overlay bckover
	overlay=()
	update=0
	#bufferdata[size_x]=$((COLUMNS / 2))
	#bufferdata[size_y]=$((LINES / 3))
	#bufferdata[position_x]=$((COLUMNS / 2 - COLUMNS / 4))
	#bufferdata[position_y]=$((LINES / 2 - LINES / 6))
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='About Ebashs'
		[mode]='view'
		[help_message]='About'
		[filetype]='i*view'
		[file]='*about*'
		[modified]=0
		[raw]=1
	)
	size-full
	declare -gn menuline=menulineabout
	menulineabout=(
		[quit]='quit-view'
	)
	mapfile -t -O 1 buffer <<EOF
Ebashs $version
Copyrightn't () 2023 Aeknt. 

This is Ebashs, one component of the Bash/Bash operating system.

An editor written in pure bash via nonsense sphagetti code trying copying emacs.

Repo                     https://github.com/aeknt/spis
                         Ebashs comes with ABSOLUTELY NO WARRANTY




Based on                 https://github.com/comfies/bed


  ─[bsd0]─────────────────────────────────────────────────────────────────────────────────────
  Permission to use, copy, modify, and/or distribute this software for any purpose
  with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
  TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
  DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  ────────────────────────────────────────────────────────────────────────────────────────────

EOF
	copy-array buffer bufferexpand
	clear-screen
	redraw
}
function table-init {
	table_columns="$1"
	shift
	local -i i=0
	for col in "$@"; do
		local -n n="table_column_$i"
		n="$col"
		((i++))
	done
}
function table-char {
	if (( ${#@} == 11 )); then
		table_char=("$@")
	else
		table_char=(─ │ ┌ ┬ ┐ ├ ┼ ┤ └ ┴ ┘)
	fi
}
function table-top {
	printf '%s' "${table_char[2]}"
	for ((i=0; i<table_columns; i++)); do
		local -n n="table_column_$i"
		for ((ii=1; ii-1<n; ii++)); do
			printf '%s' "${table_char[0]}"
		done
		((i==table_columns-1)) || printf '%s' "${table_char[3]}"
		((i==table_columns-1)) && printf '%s' "${table_char[4]}"
	done
	printf '\n'
}
function table-divider {
	table-title-line "$@"
}
function table-title-line {
	printf '%s' "${table_char[5]}"
	for ((i=0; i<table_columns; i++)); do
		local -n n="table_column_$i"
		for ((ii=1; ii-1<n; ii++)); do
			printf '%s' "${table_char[0]}"
		done
		((i==table_columns-1)) || printf '%s' "${table_char[6]}"
		((i==table_columns-1)) && printf '%s' "${table_char[7]}"
	done
	printf '\n'
}
function table-bottom {
	printf '%s' "${table_char[8]}"
	for ((i=0; i<table_columns; i++)); do
		local -n n="table_column_$i"
		for ((ii=1; ii-1<n; ii++)); do
			printf '%s' "${table_char[0]}"
		done
		((i==table_columns-1)) || printf '%s' "${table_char[9]}"
		((i==table_columns-1)) && printf '%s' "${table_char[10]}"
	done
	printf '\n'
}
function table-item {
	local -i i=0
	for item in "$@"; do
		local -n n="table_column_$i"
		printf '%s' "${table_char[1]}"
		printf '%s' "$item"
		printf '%*s' $(( n - ${#item} )) ''
		((i++))
	done
	printf '%s' "${table_char[1]}"
	printf '\n'
}
function table-title {
	local -i i=0
	for title in "$@"; do
		local -n n="table_column_$i"
		printf '%s' "${table_char[1]}"
		printf '%*s' $(( n / 2 - ( ${#title} / 2 ) )) ''
		printf '%s' "$title"
		if ((${#title}%2==0)) && ((n%2==1)); then
			printf '%*s' $(( ( n / 2 - ( ${#title} / 2 ) ) + 1 )) ''
		else
			printf '%*s' $(( n / 2 - ( ${#title} / 2 ) )) ''
		fi
		((i++))
	done
	printf '%s' "${table_char[1]}"
	printf '\n'
}
function code-block {
	while read -r; do echo "$REPLY"; done
}
function print-stdin {
	while read -r; do echo "$REPLY"; done
}
function text {
	while read -r; do
		l=${#REPLY}
		for ((i=0; i<l; i+=(bufferdata[size_x]/3)*2)); do
			printf '%s%s\n' "$1" "${REPLY:i:(bufferdata[size_x]/3)*2}"
		done
	done
}
function title {
	printf '[ %s ]' "$@"
}
function code {
	printf '%s' "$@"
}
function header {
	arg=$*
	table-init 1 $(( ${#arg} * 2 ))
	table-char ═ ║ ╔ X ╗ X X X ╚ X ╝
	print-stdin <<EOF2
                                     $(table-top)
                                     $(table-title "${1}")
                                     $(table-bottom)
EOF2
}
function manual {
	save openfile
	((current_count++))
	current_buffer="about_${current_count}"
	add-to-list
	declare -Ag "${current_buffer}_bufferdata"
	set-current
	copy-array overlay bckover
	overlay=()
	update=0
	#bufferdata[size_x]=$((COLUMNS / 2))
	#bufferdata[size_y]=$((LINES / 3))
	#bufferdata[position_x]=$((COLUMNS / 2 - COLUMNS / 4))
	#bufferdata[position_y]=$((LINES / 2 - LINES / 6))
	bufferdata=(
		[line]=1
		[base]=1
		[column]=0
		[info]='About Ebashs'
		[mode]='view'
		[help_message]='About'
		[filetype]='i*render'
		[file]='*about*'
		[modified]=0
		[raw]=1
	)
	size-full
	declare -gn menuline=menulineabout
	menulineabout=(
		[quit]='quit-view'
	)
	get-manual
	copy-array buffer bufferexpand
	clear-screen
	redraw
}
function get-manual {
	#DO NOT edit following lines, makedoc handles them automatically
	# MAKEDOC INSERT README START
mapfile -t -O 1 buffer <<EOF
$(text <<EOF2
This is Ebashs, one component of the Bash/Bash operating system.
… or even better an attempt to clone GNU Emacs in bash.
EOF2
)

$(text '    '<<EOF2
Note that the readme, may be currently outdated as I am changing the core functioning of Ebashs.

Versions of Ebashs ending in WIP-x are and will be broken, you can check version via M-x about or by reading the second line of Ebashs script.
EOF2
)

$(header EBASHS)

$(title DESCRIPTION)

$(text <<EOF2
An attempt to clone GNU Emacs but in bash.
EOF2
)

$(title FEATURES)

$(text <<EOF2
syntax highlighting
custom keybindings
custom modes -- so you can implement the evil too
file picker
mouse support
EOF2
)

$(title CONFIG)

$(text <<EOF2
Ebashs is configured via variables defined at start, you can separate it into file and then source it.
EOF2
)

    $(title 'OPTIONS ARRAY')

$(table-init 3 19 19 39; table-char
print-stdin <<EOF2
    $(table-top)
    $(table-title NAME DEFAULT DESCRIPTION)
    $(table-title-line)
    $(table-item mouse ' 0' 'enable mouse at launch')
    $(table-item todonote ' 1' "highlight 'TODO:' & 'NOTE:'")
    $(table-item menuline ' 1' 'display menuline')
    $(table-item tabchar "$(code '|   ')" 'what should tab display as')
    $(table-item file_prompt "'Path: '" 'file setting prompt')
    $(table-item cmd_prompt "'M-x '" 'command line prompt')
    $(table-item cancelhex "'18 0' (C-x)" 'keybinding to exit debug input menu')
    $(table-item default_mode ' edit' 'what mode should be set on launch')
    $(table-item help_message "'F10 to open menu'" 'top right help message')
    $(table-item dired_message "'Pick a file'" 'same as above but for dired buffer')
    $(table-bottom)
EOF2
)

    $(title 'KEYBINDING ARRAYS')

$(text '    ' <<EOF2
Keybinding arrays match with modes. The array has to be associative and nammed $(code 'keys_<mode>'). $(code 'keys_def') is reserved and used as reference for other arrays, it's also reversed compared to other keybinding arrays.
EOF2
)

$(text '    ' <<EOF2
There is also a optionable option array possible for all keybinding arrays. Currently only defined option is [else] which defines what should happen if no key is matched from the keybinding. These arrays have to be named $(code 'key_options_<mode>').
EOF2
)

    $(title MODES)

$(text '    ' <<EOF2
Modes determine used keybinding and other properties of buffer.
EOF2
)

$(table-init 2 19 43; table-char
print-stdin <<EOF2
    $(table-top)
    $(table-title NAME DESCRIPTION)
    $(table-title-line)
    $(table-item edit "general editing mode")
    $(table-item dired "mode used in file picker")
    $(table-item view "read-only mode")
    $(table-item menu "mode of menus")
    $(table-item debuginput "for getting input codes (M-x input)")
    $(table-item prefix "for C-x prefix")
    $(table-item prefix_help "for C-h prefix")
    $(table-item quit "for quit confirmation")
    $(table-item list_buffers "used in buffer switcher")
    $(table-bottom)
EOF2
)

    $(title STYLE)

$(text '    ' <<EOF2
Style of stuff is defined as escape code.
EOF2
)

$(table-init 3 19 19 39; table-char
print-stdin <<EOF2
    $(table-top)
    $(table-title NAME DEFAULT DESCRIPTION)
    $(table-title-line)
    $(table-item none ' \e[m' 'Style reset')
    $(table-item TODO ' \e[0;97;45m' "Highlighting of 'TODO: '")
    $(table-item NOTE ' \e[0;97;100m' "Highlighting of 'NOTE: '")
    $(table-item menuline ' \e[0;37;40' 'Menuline')
    $(table-item menuitem ' \e[0;37;40' 'Items of menuline')
    $(table-item link ' \e[94m' 'Redirects')
    $(table-item menuitemselected ' \e[30;45m' 'Selected item of menu')
    $(table-item infoline ' \e[40;97m' 'Bottom statusline')
    $(table-item number ' \e[0;90m' 'Line count')
    $(table-item numberempty ' \e[0;90m' 'Lines that do not exist')
    $(table-item numberselected ' \e[0;91m' 'Currently selected line')
    $(table-item tab ' \e[0;90m' 'Tabs')
    $(table-divider)
    $(table-item qutevar ' \e[0;36;48m' 'Quoted variables')
    $(table-item comment ' \e[3;37;48m' 'Comments')
    $(table-item variable ' \e[0;96m' 'Variables')
    $(table-item option ' \e[0;93m' 'Options')
    $(table-item flow ' \e[0;93m' 'Control flow')
    $(table-item bracket ' \e[1;95m' 'Brackets')
    $(table-item quote ' \e[0;92m' 'String literals')
    $(table-item dquote ' \e[0;32m' 'Strings')
    $(table-item set ' \e[0;94;108m' 'Variable assignments')
    $(table-item fn ' \e[0;30;44m' 'Function definitions')
    $(table-item keyword ' \e[0;91m' 'Keywords')
    $(table-bottom)
EOF2
)

    $(title SYNTAX)

$(text '    ' <<EOF2
Defines which syntax functions should be used for which file types.
EOF2
)

    $(title MENULINE)

$(text '    ' <<EOF2
Defines items in menuline, content of keys defines which functions should be ran on invocation.
EOF2
)

    $(title MENUS)

$(text '    ' <<EOF2
Each menu has to have helper function to set it up on request:
EOF2
)
$(code-block bash <<EOF2
        <menu>() { declare -ng menucon=<menu>; menu; }
EOF2
)
$(text '    ' <<EOF2
The contents of menu are defined by an associative  array.
EOF2
)

    $(title COMMANDS)

$(text '    ' <<EOF2
Defines commands that can be used in $(code 'M-x').
EOF2
)

$(title EXTENDING)

$(text <<EOF2
Some of useful variables and for extending Ebashs
EOF2
)

$(table-init 2 19 43; table-char
print-stdin <<EOF2
$(table-top)
$(table-title NAME DESCRIPTION)
$(table-title-line)
$(table-item buffer 'File data')
$(table-item buffersyntax 'Multidimensional buffer for rendering')
$(table-item bufferexpand 'Special characters filtered out')
$(table-item bufferdata 'Options of current buffer')
$(table-item charmap 'Definitions for bufferexpand')
$(table-item mode 'Current mode')
$(table-item commands 'List of M-x commands')
$(table-bottom)
EOF2
)

$(title 'SYNTAX HIGHLIGHTING')

$(text <<EOF2
Ebashs handles highlighting via checking 'syntax' array which consists of $(code '[file type]=syntax-function')
EOF2
)

    $(title 'SYNTAX FUNCTIONS')

$(text '    ' <<EOF2
Here is sample bash syntax function included with Ebashs:
EOF2
)

$(code-block bash <<EOF2
    syntax+=(
        [bash]=syntax-bash
    )
    syntax-bash() {
        ((comment)) && set-style comment && return
        local word="$1"
        case "${word}" in
            '"$'*) set-style quotevar;;
             '#'*) set-style comment && comment=1;;
             '$'*) set-style variable;;
             '-'*) set-style option;;
            *'()') set-style fn;;
            '||'|'&&'|';') set-style flow;;
            '('|')'|'{'|'}'|'[['|']]'|'['|']') set-style bracket;;
            'function') set-style fn;;
            *"'"*) set-style quote;;
            *'"'*) set-style dquote;;
            *'='*) set-style set;;
            'echo'|'return'|'case'|'esac'|'for'|'while'|'do'|'done'|'if'|'elif'|\\
            'else'|'printf'|'fi'|'continue'|'exit'|'bind'|'then'|'break'|'read'|'declare'|\\
            'typeset'|'local'|'let'|'shopt'|'trap'|'set'|'eval'\\
             ) set-style keyword;;
            *) set-style none;;
        esac
    }
EOF2
)

$(text '    ' <<EOF2
The comments are handled specially via comment variable which gets reseted at every newline.
EOF2
)

$(title EXAMPLES)

$(text <<EOF2
A simple function to jump to line 11 when $(code 'C-x M-e') is pressed:
EOF2
)

$(code-block bash <<EOF2
    keys_prefix+=( # prefix is the mode for C-x
        [1b 65 0]='jump-to-11' # '1b 65 0' is the M-e in hex.
                               # You can use the M-x input to convert to hex. format.
    )
    jump-to-11() {
        [[ -n "${buffer[11]}" ]] && line=11 # If line 11 exists, set current line to 11.
        [[ "${bufferdata[mode]}" = 'prefix' ]] && quit-prefix
                                    # Since the key stroke contains C-x as prefix,
                                    # quit-prefix is is required as otherwise
                                    # it would stay in 'prefix' mode.
        redraw # Redraw whole buffer.
    }
EOF2
)

$(text <<EOF2
A function to write $(code 'Hello world!') at current cursor position when $(code 'M-x hi') is typed
EOF2
)

$(code-block bash <<EOF2
    commands+=(
        [hi]='hello-world' # Add command 'hi' invoking 'hello-world' function:
    )
    hello-world() {
        insert-word 'Hello-world!' # The function 'insert-word' handles insertion
                                   # of stuff, so no redraw or other magic is needed.
    }
EOF2
)

$(text '    ' <<EOF2
Create a menu containing previous functions $(code 'jump-to-11') & $(code 'hello-world'):
EOF2
)

$(code-block bash <<EOF2
    example-menu-function() { declare -ng menucon='example_menu'; menu; }
    # A function with which the menu will be invoked.

    declare -A example_menu
    example_menu=(
        [Jump to 11  ]='jump-to-11'  # The names of items in menu should have
        [Hello world!]='hello-world' # same width to display correctly.
    )

    # Add the example_menu into default menuline
    menulineedit+=(
        [Example]='example-menu-function'
    )
EOF2
)

$(title ETC)

$(text <<EOF2
Logo and it's krita file is in etc/

This readme is generated from doc/README.bml via makedoc script via either makedoc -r (README.md only) or makedoc -a (README.md & internal manual), the makedoc -f does internal manual only
EOF2
)

$(title CREDITS)

$(text '    ' <<EOF2
Based on https://github.com/comfies/bed
EOF2
)
EOF
	# MAKEDOC INSERT README STOP
}
function quit-view {
	copy-array bckover overlay
	restore openfile
	redraw
}

function write-buffer {
    true >"${bufferdata[file]}" # Set the file to an empty text file
    for ln in "${buffer[@]}"; do # Write in the buffer to the file
        echo "$ln" >>"${bufferdata[file]}"
    done
    bufferdata[modified]=0
    message="Wrote ${#buffer[@]} lines to '$file'"
}

function newline {
	bufferdata[modified]=1
	buffer=("" "${buffer[@]:1:${bufferdata[line]}-1}" "" "${buffer[@]:${bufferdata[line]}}")
	unset 'buffer[0]'
	buffer[bufferdata[line]]="${buffer[${bufferdata[line]}+1]:0:${bufferdata[column]}}"
	buffer[bufferdata[line]+1]="${buffer[${bufferdata[line]}+1]:${bufferdata[column]}:${#buffer[${bufferdata[line]}+1]}}"
	bufferdata[column]=0
	buffer-lenght
	syntax-shift
	next-line
}

syntax-shift() {
	local -a tmp1
	local -a tmp2
	local extmp1
	local extmp2
	message="$buffer_lenght"
	for ((l=bufferdata[line];l<${#buffer[@]}+1;l++)); do
		local -n linearray="${current_buffer}_syntax${l}"
		copy-array linearray tmp1
		copy-array tmp2 linearray
		copy-array tmp1 tmp2
		extmp1="${bufferexpand[l]}"
		bufferexpand[l]="$extmp2"
		extmp2="$extmp1"
	done
	buffersyntax[buffer_length]="${current_buffer}_syntax${buffer_lenght}"
	unset tmp1 tmp2
	make-render-area $((bufferdata[line])) $((bufferdata[line]+2))
}

function delete-line {
	bufferdata[modified]=1
	buffer=("" "${buffer[@]:1:${bufferdata[line]}-1}" "${buffer[@]:${bufferdata[line]}+1}")
	unset 'buffer[0]'
	((bufferdata[line] > ${#buffer[@]})) && previous-line
	bufferdata[modified]=true
	buffer-lenght
	make-render
	redraw
}

function backspace {
	if [ "${#buffer[${bufferdata[line]}]}" = 0 ]; then
		delete-line
		bufferdata[column]="${#buffer[${bufferdata[line]}]}"
		redraw
		return 0
	fi
	local -i rlr
	unset ta
	local ta
	ta=${bufferexpand[${bufferdata[line]}]:0:${bufferdata[column]}}
	ta=${ta//[^t]}
	ta=${#ta}
	rlr=$((bufferdata[column] + ta / 4 - ta))
	if [ $rlr = 0 ]; then
		buffer[${bufferdata[line]}-1]="${buffer[${bufferdata[line]}-1]}${buffer[${bufferdata[line]}]}"
		delete-line
		bufferdata[column]=${#bufferexpand[${bufferdata[line]}]}
		redraw
		return 0
	fi
	buffer[${bufferdata[line]}]="${buffer[${bufferdata[line]}]:0:$(( rlr - 1 ))}${buffer[${bufferdata[line]}]:${rlr}}"
	backward-char #go back with cursor
	make-render-line # copy the buffer into buffersyntax and bufferexpand
	redraw #draw it
	bufferdata[modified]=1
}
declare -A keys_quit
keys_quit=(
	[79 0]='save-quit'
	[6e 0]='die'
	[63 0]='quit-quit'
)
function save-quit {
	write-buffer
	die
}
function quit-quit {
	bufferdata[mode]="$bckmode"
	message='Quit canceled'
	redraw
}
function quit {
	if ((bufferdata[modified])); then
		[ -z "$bckmode" ] && bckmode="${bufferdata[mode]}"
		bufferdata[mode]='quit'
		redraw-statusline
		printf '\e[%s;0H' $((bufferdata[size_y] + bufferdata[position_y]))
		printf '%s' 'Buffer modified, save before close? [Y/n/c]'
	else
		die
	fi
}

function previous-line {
	for ((i = 0; i < ${1:-1}; i++)); do
		((bufferdata[line] > 1)) && ((bufferdata[line]--)) # As long as we can keep going up, go up
		((bufferdata[line] < bufferdata[base] + 1)) && ((bufferdata[base]--)) && # Push back the top if we need to
			((bufferdata[base] <= 0)) && bufferdata[base]=1 # Don't push back if our base is at 1
		[ -z "$bckrl" ] && bckrl="${bufferdata[column]}"
		(( ${#bufferexpand[bufferdata[line]]} < bufferdata[column] )) && bufferdata[column]=${#bufferexpand[bufferdata[line]]}
		(( ${#bufferexpand[bufferdata[line]]} > bckrl )) && bufferdata[column]=${bckrl}
	done
	redraw
}

function scroll-down {
    previous-line $((bufferdata[size_y] - 3))
}

function next-line {
	for ((i = 0; i < ${1:-1}; i++)); do
		((bufferdata[line] < ${#buffer[@]}+1)) && ((bufferdata[line]++)) # If we can go down, go down
		((bufferdata[line] > bufferdata[base] + bufferdata[size_y] - 3 - bottomlines)) && ((bufferdata[base]++)) # Move window down if needed
			[ -z "$bckrl" ] && bckrl="${bufferdata[column]}"
		(( ${#bufferexpand[bufferdata[line]]} < bufferdata[column] )) && bufferdata[column]=${#bufferexpand[bufferdata[line]]}
		(( ${#bufferexpand[bufferdata[line]]} > bckrl )) && bufferdata[column]=${bckrl}
	done
	redraw
}

function scroll-up {
    next-line $((bufferdata[size_y] - 3))
}

function execute {
    ((bufferdata[line] == 0)) && return # If the line is not possible, do nothing
    printf '\e[?25h\e[%sH' "$((bufferdata[line] + 2 - bufferdata[base]))" # Reset cursor position and enable cursor
    read -re -p "$(printf '%4s ' "$")" # Present editable line
    if [[ "$REPLY" != "${buffer[${bufferdata[line]}]}" ]]; then # If the line is changed, update and inform
        buffer[${bufferdata[line]}]="$($REPLY)"
        bufferdata[modified]=1
    fi
    make-render
    redraw
}

function forward-char {
	for ((i = 0; i < ${1:-1}; i++)); do
		case "${bufferexpand[${bufferdata[line]}]:${bufferdata[column]}+1:1}" in
			't') bufferdata[column]=$(( bufferdata[column] + ${#options[tabchar]}));;
			*) ((bufferdata[column]++));;
		esac
		((bufferdata[column] > ${#bufferexpand[${bufferdata[line]}]})) && { bufferdata[column]=0; next-line; }
		bckrl=
	done
	redraw
}
function backward-char {
	for ((i = 0; i < ${1:-1}; i++)); do
		case "${bufferexpand[${bufferdata[line]}]:${bufferdata[column]}-1:1}" in
			't') bufferdata[column]=$(( bufferdata[column] - ${#options[tabchar]}));;
			*) ((bufferdata[column]--));;
		esac
		((bufferdata[column] < 0)) && ((bufferdata[line]==1)) && {
			bufferdata[line]=1
			bufferdata[column]=0
		}
		((bufferdata[column] < 0)) && {
			previous-line
			bufferdata[column]="${#bufferexpand[${bufferdata[line]}]}"
		}
		bckrl=
	done
	redraw
}
function move-beginning-of-line {
	bufferdata[column]=0
	redraw-statusline
	redraw
}
function move-end-of-line {
	bufferdata[column]="${#bufferexpand[${bufferdata[line]}]}"
	redraw-statusline
	redraw
}

function forward-word {
	((bufferdata[column] == ${#bufferexpand[bufferdata[line]]})) && {
		next-line
		move-beginning-of-line
	}
	while :; do
		((bufferdata[column] < ${#bufferexpand[bufferdata[line]]})) && ((bufferdata[column]++)) || break
		case "${bufferexpand[bufferdata[line]]:${bufferdata[column]}:1}" in
			't'|'s') break;;
		esac
	done
	redraw
}
function backward-word {
	((bufferdata[column] == 0)) && {
		previous-line
		move-end-of-line
	}
	while :; do
		((bufferdata[column] > 0)) && ((bufferdata[column]--)) || break
		case "${bufferexpand[bufferdata[line]]:${bufferdata[column]}:1}" in
			't'|'s') break;;
		esac
	done
	redraw
}

function shell {
	clear-screen
	bash # NOTE: in theory an external command
	redraw
}

function die {
	((no_cleanup)) && exit
    echo -e "\e[?1000;1006;1015l" #disable mouse tracking
	clear-screen # TODO fix the buffer switching
	printf '\e[?25h\e[?7h\e[?1049l' # Reset terminal to sane mode
    exit "${errno:-0}" # Assume that we are exiting without an error
}
function toggle-mouse {
	(("${options[mouse]}"==1)) && {
		echo -ne "\e[?1000;1006;1015l"
		options[mouse]=0
		message="Disabled options[mouse]"
		return
		}
	(("${options[mouse]}"==0)) && {
		echo -ne "\e[?1000;1006;1015h"
		options[mouse]=1
		message="Enabled options[mouse]"
		return
	}
}
function menuclick {
	#determine which item should be triggered
	[ -z "$1" ] && menulinep=0 || menulinep=$1
	local cx="${bufferdata[position_x]}"
	for a in "${!menuline[@]}"; {
		la="${#a}"
		((menulinep>cx)) && ((menulinep<(cx + la + 1))) && ${menuline[$a]}
		cx=$(( cx + la + 1 ))
	}
}
function menudraw {
	printf '\e[?25l'
	printf '\e[%s;0H' $menulinepy
	local mi=0
	for action in "${!menucon[@]}"; do
		if ((mi == menuselection)); then
			printf "\e[%sC${style[menuitemselected]}%s${reset}\n" $menulinep "$action"  
		else
			printf "\e[%sC${style[menuitem]}%s${reset}\n" $menulinep "$action"
		fi
		((mi++))
	done
}
function menuup {
	((menuselection > 0)) && ((menuselection--))
	menudraw
}
function menudown {
	((menuselection < ${#menucon[@]} -1)) && ((menuselection++))
	menudraw
}
function menuselect {
	local mi=0
	for action in "${!menucon[@]}"; do
		((mi == menuselection)) && "${menucon[$action]}"
		((mi++))
	done
}
function menuleave {
	ismenu=0
	bufferdata[mode]="${modebackup}"
	overlay=()
	redraw
}
function menu {
	((ismenu == 0 )) && modebackup="${bufferdata[mode]}"
	ismenu=1
	declare -ig menuselection=0
	bufferdata[mode]='menu'
	overlay+=('menudraw')
	redraw
}
function tile-buffers {
	bck_current_buffer="$current_buffer"
	case "${options[tile_mode]}" in
		vertical)
			target_x=$(( COLUMNS / ${#listbuffers[@]} ))
			target_x_offset=0
			target_y=$LINES
			target_y_offset=0;;
		horizontal)
			target_y=$(( LINES / ${#listbuffers[@]} ))
			target_y_offset=0
			target_x=$COLUMNS
			target_x_offset=0;;
	esac
	for b in "${listbuffers[@]}"; do
		current_buffer="$b"
		set-current
		bufferdata[size_x]=$target_x
		bufferdata[position_x]=$target_x_offset
		bufferdata[size_y]=$target_y
		bufferdata[position_y]=$target_y_offset
		case "${options[tile_mode]}" in
			vertical)
				target_x_offset=$((target_x_offset + target_x));;
			horizontal)
				target_y_offset=$((target_y_offset + target_y));;
		esac
		buffer-lenght
		redraw
		
	done
	current_buffer="$bck_current_buffer"
	set-current
	buffer-lenght
}
function tile-vertical {
	options[tile_mode]='vertical'
}
function tile-horizontal {
	options[tile_mode]='horizontal'
}
function redraw {
	((bufferdata[column] +3 < bufferdata[size_x] - buffer_lenght - 1)) && bufferdata[basecolumn]=0
	((bufferdata[column] +3 > bufferdata[size_x] - buffer_lenght - 1)) && bufferdata[basecolumn]=$((bufferdata[column] - (bufferdata[size_x] + bufferdata[position_x] - buffer_lenght - 1) +3 ))
	bckIFS="$IFS"
	printf '\e[?25l'
	#((update==1)) && {
	#	bufferdata[size_x]=$COLUMNS
	#	bufferdata[size_y]=$((LINES - 1))
	#}
	(("${options[menuline]}"==1)) && {
		printf "\e[0m\e[%s;%sH${style[menuline]}\e[?25l%*s\r%s"\
			   "${bufferdata[position_y]}"\
			   "${bufferdata[position_x]}"\
			   "${bufferdata[size_x]}"\
			   "${bufferdata[help_message]}"
		printf '\e[%sG%s\e[0m\n' "${bufferdata[position_x]}" "${!menuline[*]}"
	} || printf "\e[%s;%sH" "${bufferdata[position_y]}" "${bufferdata[position_x]}"
	# Iterate over shown lines
	IFS=''
	if ((bufferdata[raw])); then
		for ((i = bufferdata[base]; i - bufferdata[base] < bufferdata[size_y] - ( bottomlines + toplines ) + 1; i++)); do
			printf "${style[number]}"
			((i == bufferdata[line])) && printf "${style[numberselected]}" # Highlight line number if selected
			((i > ${#buffer[@]})) && printf "\e[%sG${style[numberempty]}\e[K%$((buffer_lenght/2))s~\e[m\n" "${bufferdata[position_x]}"\
					|| {
					printf "\e[%sG\e[K%${buffer_lenght}s\e[m %s\n"\
						   "${bufferdata[position_x]}"\
						   "$i"\
						   "${buffer[i]:bufferdata[basecolumn]:bufferdata[size_x] - (buffer_lenght + 1)}"
				}
		done
	else
		for ((i = bufferdata[base]; i - bufferdata[base] < bufferdata[size_y] - (toplines + bottomlines) + 1; i++)); do
			printf "${style[number]}"
			((i == bufferdata[line])) && printf "${style[numberselected]}" # Highlight line number if selected
			((i > ${#buffer[@]})) && printf "\e[%sG${style[numberempty]}\e[K%$((buffer_lenght/2))s~\e[m\n" "${bufferdata[position_x]}"\
					|| {
					# to improve speed syntaxing has to be "lazy" -- having to be heavily cached as ram is far less expensive to waste
					[ -z "${buffersyntax[bufferdata[base]+bufferdata[size_y]-(bottomlines+toplines)+2]}" ] && {
						bottomest=$((bufferdata[base]+bufferdata[size_y]-(bottomlines+toplines)+2))
						make-render-area $bottomest $((bottomest+options[render_chunk]))
					}
					[ -z "${buffersyntax[i]}" ] && {
						make-render-area $((base + i)) $((base + i + 1)) # idk why make-render-line doesnt work here
					}
					# due to escape codes present in buffersyntax,
					# the buffersyntax has to be multidimensional nonsense for perfomance reasons
					local -n linearray="${buffersyntax[i]}"
					printf "\e[%sG\e[K%${buffer_lenght}s\e[m %s\n"\
						   "${bufferdata[position_x]}"\
						   "$i"\
						   "${linearray[*]:bufferdata[basecolumn]:bufferdata[size_x] - (buffer_lenght + 1)}"
				}
		done
	fi
	IFS="$bckIFS"
	redraw-statusline
	redraw-commandline
	redraw-cursor
	# Render all overlays
	for o in "${overlay[@]}"; {
		"${o}"
	}
}
function redraw-cursor {
	printf '\e[?25h\e[%s;%sH'\
		   $((bufferdata[line] + 1 - bufferdata[base] + bufferdata[position_y]))\
		   $((bufferdata[column] - bufferdata[basecolumn] + buffer_lenght + 2 + bufferdata[position_x]))
}
function redraw-statusline {
	printf "\e[%s;%sH\n\e[%sG${style[infoline]}%*s\e[%sG%s %s (%s,%s) (screen: %s)\e[m" \
	       $((bufferdata[size_y] - 2 + bufferdata[position_y])) $((bufferdata[size_x] + bufferdata[position_x])) "${bufferdata[position_x]}" $((bufferdata[size_x])) "${bufferdata[info]}" "${bufferdata[position_x]}" \
	       "${bufferdata[mode]}" "$(base-name "${bufferdata[file]}")[${bufferdata[filetype]}]" "${bufferdata[line]}" "${bufferdata[column]}" "$current_buffer"
}
function redraw-commandline {
	printf "\e[%s;%sH\n${style[commandline]}%*s\r%s\e[m" \
		   $((bufferdata[size_y] - 1 + bufferdata[position_y])) $((bufferdata[size_x] + bufferdata[position_x])) $((bufferdata[size_x])) ' ' "$message"
}

function input-make-hex {
	input_hex=()
	local -i i=0
	echo "$1" | {
		while read -rsn1; do
			input_hex[i]="$(printf "%x\n" "'${1:$i}")"
			((i++))
		done
	}
}
function insert-word {
	local -i rlr
	unset ta
	local ta
	ta=${bufferexpand[${bufferdata[line]]}:0:${bufferdata[column]}}
	ta=${ta//[^t]}
	ta=${#ta}
	rlr=$((bufferdata[column] + ta / 4 - ta))	
	buffer[line]="${buffer[${bufferdata[line]}]:0:${rlr}}$1${buffer[${bufferdata[line]}]:${rlr}}" #add at cursor position - amount of tabs * tab size
	make-render-line
	forward-char "${#1}"
	redraw
	bufferdata[modified]=1
}
function input-key {
	local -i x y mode_contains
	input-make-hex "$1"

	local -n modekeys="keys_${bufferdata[mode]}"
	for str in "${!modekeys[@]}"; do
		[ "$str" = "${input_hex[*]}" ] && {
			"${modekeys[$str]}"
			mode_contains=1
		}
	done
	((mode_contains == 0)) && {
		local -n key_options="key_options_${bufferdata[mode]}"
		((${#key_options[@]})) && {
			[ -n "${key_options[else]}" ] && "${key_options[else]}"
		}
	}
	((mode_contains == 1)) && {
		return
	}
	[ "${bufferdata[mode]}" = 'edit' ] || return
	(("${options[mouse]}"==1)) && {
		#parse mouse stuff somewhatish weirdly
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 36 34' ] && previous-line && return
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 36 35' ] && next-line && return
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 38 30' ] && previous-line 9 && return
		[ "${input_hex[*]:0:5}" = '1b 5b 3c 38 31' ] && next-line 9 && return
		((skipnext==1)) && skipnext=0 && return
		((skipnext==0)) && [ "${input_hex[*]:0:2}" = '1b 5b' ] && {
			mapfile -t -d '' inputarray <<< "${1}"
			inputarray[-1]="${inputarray[-1]%?}"
			[ -z "${inputarray[2]}" ] && skipnext=1
			mapfile -t -d ';' inputarray <<< "${inputarray[1]}"
			inputarray[-1]="${inputarray[-1]%?}"	
			mousemode="${inputarray[0]}"
			x="${inputarray[1]}"
			y="${inputarray[2]::-1}"
			#limitations of movenment
			#TODO:
			[ $y = "${bufferdata[position_y]}" ] && menuclick $x && return #handle menuline
			((x < (buffer_lenght + bufferdata[position_x] + 2))) && {
				if [ "$mousemode" = '[<0' ]; then
					bufferdata[line]=$(( bufferdata[base] + ( (y - bufferdata[position_y]) - toplines) ))
					redraw
				elif [ "$mousemode" = '[<2' ]; then #VERY BAD SOLUTION, TODO: FIX
					clear-screen
					echo enter line number
					read -re line
					redraw
				fi
				return
			}
			bufferdata[line]=$(( bufferdata[base] + ( y - bufferdata[position_y] - 1) ))
			bufferdata[column]=$(( x - (bufferdata[position_x] + buffer_lenght + 2) ))
			((bufferdata[line] > ${#bufferexpand[@]})) && bufferdata[line]=${#bufferexpand[@]}
			((bufferdata[column] > ${#bufferexpand[bufferdata[line]]})) && bufferdata[column]=${#bufferexpand[bufferdata[line]]}
			redraw
			return
		}
	}
	#[ "${input_hex[*]:0:3}" = '1b 5b 3c' ] && return
	[ "${input_hex[*]:0:1}" = '1b' ] && return # TODO: prevent escape codes without hacky blocking
	[ "${bufferdata[mode]}" = edit ] && {
		[[ $1 =~ [[:cntrl:]] ]] && return
		local -i rlr
		unset ta
		local ta
		ta=${bufferexpand[${bufferdata[line]}]:0:${bufferdata[column]}}
		ta=${ta//[^t]}
		ta=${#ta}
		rlr=$((bufferdata[column] + ta / 4 - ta))	
		buffer[bufferdata[line]]="${buffer[${bufferdata[line]}]:0:${rlr}}${1}${buffer[${bufferdata[line]}]:${rlr}}" #add at cursor position - amount of tabs * tab size
		#go right with cursor
		make-render-line
		forward-char
		redraw
		[ "$1" = '	' ] && printf '\e[%sC' $((${#options[tabchar]} - 1))
		bufferdata[modified]=1
	}
}
function main {
	printf '\e[?1049h'
	(("${options[mouse]}")) && echo -ne "\e[?1000;1006;1015h" #enable mouse tracking
    if [[ "$1" ]]; then # If a file was provided in the terminal pre-load it
        if [ -d "$1" ]; then
			cd "$1" || exit
			dired # enter the file selector in specified folder
		else
			read-buffer "$1"
		fi
    else
		dired # enter the file selector
	fi
	begin
}
function begin {
	redraw
	while :; do
		local -a k=()
		local -i i=1    
		if read -rsN1 k[0]; then # Check for ready input
			while read -rsN1 -t0.0001 k[$i]; do ((i++)); done # Multibyte hack
			input-key "$(printf '%s' "${k[@]}")" # Handle keypress event
		fi
	done
}
main "$@"
